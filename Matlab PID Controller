% Author: Adnan Bhaiji
% Reference: Basic structure based off http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-sample-time/



%time of last sample
last_t = 0;

%sample time, time variable, and time step to calculate actual time
samp_t = 8;
t = 0; % time variable
dt= 0.1; % the actual time each cycle represents

%tuning parameters. 
kp = 1; ki = 1; kd = 1;

%these constants have time multiplied into them, to simplify equations
kd = kd/(samp_t*dt); % pid term --> kd * dError / dt --> kd / dt * dError --> kd / dt == kd / samp_t
ki = ki * (samp_t *dt); % pid term -->  ki * samp_t * errSum
%
SetPoint = 100; input = 0; output = 0; LastErr = 0;    %setpoint, error, input/output terms
errSum = 0;        %error sum term for integral term 'Ki', porportional

saved_output = 0;

%set the sample time%
[ki, kd, samp_t] = set_samp_t(5, samp_t, ki, kd);


%acceleration function for testing PID
pos = 0;
%%%%%t = 0;%%%%%
%%%%%dt = 0.1;%%%%%
vel = 0;

%PID test variables%
force = 15;

for  t = 1:800     

  [ pos, vel ] = accel_test(output + force, pos, vel, dt );
  
  input = pos;
  plot (t*dt, pos, '-o'); hold on
  
  [LastErr, last_t, output, errSum, saved_output] = pidcompute(kp, ki, kd, last_t, samp_t, t, SetPoint, LastErr, pos, errSum, saved_output);
  

end 


%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%


function [LastErr, last_t, output, errSum, saved_output] = pidcompute(kp, ki, kd, last_t, samp_t, t, SetPoint, LastErr, input, errSum, saved_output)

% current time is t 

if ( (t - last_t) >= samp_t )
    
    %compute error terms
    error = SetPoint - input;
    dErr = (error - LastErr);
    errSum = errSum + error;

    %compute output term
    output = kp * error + ki * errSum + kd * dErr;
    saved_output = output;
    
    %update variables
    last_t = t;
    LastErr = error;
else
    output = saved_output;
    last_t = last_t;
    errSum = errSum;
end


end


%%%%%%%%%%%%%%%%%
%set sample time function%
%%%%%%%%%%%%%%%%%


function [ki, kd, samp_t] = set_samp_t(new_samp_t, samp_t, ki, kd)
      
    %adjust ki and kd for new sample time
    ratio = new_samp_t / samp_t;
    
    kd = (kd)/ratio;
    ki = (ki)*ratio;
    
    
    %set new sample time
    samp_t = new_samp_t;
    
end

%%%%%%%%%%%%%%%%%
%acceleration function for testing PID%
%%%%%%%%%%%%%%%%%


function [ pos, vel ] = accel_test( force, pos, vel, dt )

%calculate position
force_fric = 0.5;

    if( force > 0.1 )

        pos = pos + vel * dt;   
        vel = vel + force * dt;

    elseif ( force < 0.1 )
        
        pos = pos + vel * dt;
        vel = vel + force * dt;
        
    else
        
        pos = pos;  
        vel = vel;
        
    end
        
 end

