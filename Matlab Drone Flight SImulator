%%%%%%%%%%%%%%% PID CODE %%%%%%%%%%%%%%%% PID CODE %%%%%%%%%%%%%%%%%%%%%%%%
% Author: Adnan Bhaiji
% Reference: Basic structure based off http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-sample-time/


%time of last sample
last_t1 = 0;
last_t2 = 0;
last_t3 = 0;

%sample time, time variable, and time step to calculate actual time
samp_t = 8;
t = 0; % time variable
dt= 0.1; % the actual time each cycle represents

%tuning parameters. 
kp = 0.0015; ki = 0.000000; kd = 0.001;
%kp2 = 0.00001; ki2 = 0.000000; kd2 = 0.0001;
%kp3 = 0.00001; ki3 = 0.000000; kd3 = 0.0001;
%these constants have time multiplied into them, to simplify equations


%set the sample time%
[ki, kd, samp_t] = set_samp_t(1, samp_t, ki, kd);
[ki2, kd2, samp_t] = set_samp_t(1, samp_t, ki2, kd2);
[ki3, kd3, samp_t] = set_samp_t(1, samp_t, ki3, kd3);

%variable to save the last error to calculate derror
LastErr1 = 0; LastErr2 = 0; LastErr3 = 0;

errSum1 = 0;        %error sum term for integral term 'Ki'
errSum2 = 0;
errSum3 = 0;

% save the input, and output values until the sample_time duration has passes
saved_output1 = 0; saved_output2 = 0; saved_output3 = 0;
lastinput1 = 0; lastinput2 = 0; lastinput3 = 0;

%set desired eta values aka the setpoint
eta_dsrd = [5; 3; 2;];
%torque values for stabilization
trq_phi = 0; trq_theta= 0; trq_psi = 0;




%%%%%%%%%%%%% ATTITUDE SIM CODE %%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Control of a Quadcopter
% by Adnan Bhaiji and Raghul Sai Subramanian

% The following code is inspired by Teppo Luukkonen's paper 
%... "Modelling of a quadcopter". 


% August 2, 2018    
%motor speeds
mtr_Omegaz = [1500, 1500, 1500, 1500]; mass = 2; %kg
posdot = [0;0;0;] %m/s
pos = [0;0;0;]; %  meters
laodepos = [0;0;0;];

%lift constant
k = 2.980*power(10, -6);


%%%thrust calculation initializations%%%
g = 9.81; %m/s^2
Axx = 0.25; %kg/s
Ayy = 0.25; %kg/s
Azz = 0.25; %kg/s

air_res = [Axx, 0, 0;...
    0, Ayy, 0;
    0, 0, Azz;];


%%%attitude calculation initializations%%%
%attitude vector
attde_vecX = [1;0;0];
attde_vecY = [0;1;0];
attde_vecZ = [0;0;1];

%inertia matrix
Ixx = 4.856*power(10, -3); Iyy = 4.856*power(10, -3); Izz = 8.801*power(10, -3);
I_Mtrx = [ Ixx, 0, 0; 0, Iyy, 0; 0, 0, Izz];

I_Motor = 3.357*power(10, -5);

% lift, drag, and distance between motors
l = 4; %meters
b = 1.140*power(10, -7);

%inertial angle rates of change -- p q r
nu = zeros(3,1);
nu_dot = zeros(3,1);
%body angle rate of change
eta = zeros(3,1);
d_eta = zeros(3,1);
eta_dot = zeros(3,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
... Simulation Loop Initialization
start_time = 1;
end_time = 100;
change = 1;
dt = 0.5;
times = start_time:change:end_time;
pause_time = 0.1;

for t = times
    
    
%attitude calculation 
%p, q, r (nu) calculation and phi theta psi (eta) conversion 
%p q r
iTrqz = inertial_Torques( mtr_Omegaz, l, k, b);

nu_dot = inrtlattd_RoC( I_Mtrx, nu, iTrqz, I_Motor, mtr_Omegaz);

%phi theta psi
eta_dot = nudot2bodyframe(nu, eta);


%update eta and nu vectors
nu = nu + nu_dot*dt;
d_eta = eta_dot*dt;
eta = eta + d_eta;


attde_vecX = rotate_BodyToInertial(d_eta, attde_vecX);
attde_vecY = rotate_BodyToInertial(d_eta, attde_vecY);
attde_vecZ = rotate_BodyToInertial(d_eta, attde_vecZ);

%display eta and nu vectors
%ax1 = subplot(3,1,1);
%quiver3( zeros(3,1), zeros(3,1), zeros(3,1), [1;0;0], [0;1;0], [0;0;1], 'color', [0,0,0] ); hold on;  
%quiver3(0,0,0,attde_vecX(1), attde_vecX(2), attde_vecX(3) ); hold on;
%quiver3(0,0,0,attde_vecY(1), attde_vecY(2), attde_vecY(3) ); hold on;
%quiver3(0,0,0,attde_vecZ(1), attde_vecZ(2), attde_vecZ(3) ); hold on;


%x, y, z movement calculationsst
%thrust
thrust = k*sum(mtr_Omegaz.^2);
posdotdot = calc_posdotdot(g, k, thrust, attde_vecZ, air_res, mass, posdot);
posdot = posdotdot * dt;
pos = pos + posdot*dt;

%display trajectory
%ax2 = subplot(3,1,2);
%quiver3(laodepos(1),laodepos(2),laodepos(3),pos(1), pos(2), pos(3) ); hold on;


%update old position

laodepos = pos;

%pause(pause_time);
%cla(ax1);
%ax3 = subplot(3,1,3);
plot(t*dt, eta(1), 'c*'); hold on
plot(t*dt, eta(2), '-x'); hold on
plot(t*dt, eta(3), '--o'); 
%fprintf('eta');
%disp(eta);

%%%% attitude and thrust stablization of body %%%%
%%%% get PID torque & thrust values to calculate motor speed adjustment

%stabilize to a desired eta(1), or phi, the rotation along the x-axis

%function [LastErr, last_t, lastinput, output, errSum, saved_output] = 
%pidcompute(kp, ki, kd, last_t, samp_t, t, SetPoint, LastErr, input, lastinput, errSum, saved_output)

%calculate torque and thrust required to correct angle error
[LastErr2, last_t1, lastinput2, trq_theta, errSum2, saved_output2] =...
pidcompute(kp, ki, kd, last_t1, samp_t, t, eta_dsrd(2), LastErr2, eta(2), lastinput2, errSum2, saved_output2);

[LastErr1, last_t2, lastinput1, trq_phi, errSum1, saved_output1] =...
pidcompute(kp, ki, kd, last_t2, samp_t, t, eta_dsrd(1), LastErr1, eta(1), lastinput1, errSum1, saved_output1);

[LastErr3, last_t3, lastinput3, trq_psi, errSum3, saved_output3] =...
pidcompute(kp, ki, kd, last_t3, samp_t, t, eta_dsrd(3), LastErr3, eta(3), lastinput3, errSum3, saved_output3);


%adjust motor speeds based on torque and thrust value
mtr_Omegaz(1) = sqrt( thrust/(4*k) - trq_theta/(2*k*l) + trq_psi/(4*b) );

mtr_Omegaz(2) = sqrt( thrust/(4*k) - trq_phi/(2*k*l) - trq_psi/(4*b) );

mtr_Omegaz(3) = sqrt( thrust/(4*k) + trq_theta/(2*k*l) + trq_psi/(4*b) );

mtr_Omegaz(4) = sqrt( thrust/(4*k) + trq_phi/(2*k*l) - trq_psi/(4*b) );

end





%%%%%%%%%% thrust calculation functions %%%%%%%%%
function posdotdot = calc_posdotdot(g, ~, thrust, attde_vecZ, air_res, mass, posdot)
    gravity = g*[0;0;1;];
    
    thrust_vec = 1/mass*thrust*attde_vecZ;
    
    air_res_vec = 1/mass*air_res;
    
    posdotdot = thrust_vec - air_res_vec*posdot - gravity;
                

end


%%%%%%%%%%% attitude calculation functions %%%%%%%%%%%%
%nu dot to theta phi psi dot. this goes from intertial to body 
function bodyangles_dot = nudot2bodyframe(nu, eta)
    phi = eta(1); theta = eta(2); psi = eta(3);  
    
    
    row_1 = [1, sind(phi)*tand(theta), cosd(phi)*tand(theta)];
    
    row_2 = [0, cosd(phi), -1*sind(phi)];
    
    row_3 = [0, sind(phi)/cosd(theta), cosd(phi)/cosd(theta)];
    
    
    W_n = [row_1; row_2; row_3];
    
    bodyangles_dot = W_n * nu;
    
end

%nu dot calculation . this is in the inertial frame
function nu_dot = inrtlattd_RoC( I_Mtrx, nu, iTrqz, I_Motor, mtr_Omegaz)
    Ixx = I_Mtrx(1,1); Iyy = I_Mtrx(2,2); Izz = I_Mtrx(3,3);
    p = nu(1); q = nu(2); r = nu(3);
    
    omega_sum = mtr_Omegaz(1) + -1*mtr_Omegaz(2) + mtr_Omegaz(3) + -1*mtr_Omegaz(4);
    
    p_dot = (Iyy - Izz)*q*r - I_Motor*omega_sum*q/Ixx + iTrqz(1)/Ixx;
    q_dot = (Izz - Ixx)*p*r - I_Motor*omega_sum*p/Iyy + iTrqz(2)/Iyy;
    r_dot = (Ixx - Iyy)*p*q + iTrqz(3)/Izz;

    nu_dot = [ p_dot; q_dot; r_dot ];
    
end

%inertial frame torques
function iTrqz = inertial_Torques( mtr_Omegaz, l, k, b )
    tPhi = l*k*( -1*mtr_Omegaz(2)^2 + mtr_Omegaz(4)^2 );
    tTheta = l*k*( -1*mtr_Omegaz(1)^2 + mtr_Omegaz(3)^2 );
    tPsi = b* (mtr_Omegaz(1)^2 + -1*mtr_Omegaz(2)^2 + mtr_Omegaz(3)^2 + -1*mtr_Omegaz(4)^2);
    
    iTrqz = [tPhi; tTheta; tPsi];
end
    
%rotation matrix -- rotate vectors from body frame to inertial frame
function inrtl_Vec = rotate_BodyToInertial(d_eta, body_Vec)
    phi = d_eta(1); theta = d_eta(2); psi = d_eta(3);    
    
    row_1 = [ cosd(psi)*cosd(theta), cosd(psi)*sind(theta)*sind(phi) - sind(psi)*cosd(phi),...
              cosd(psi)*sind(theta)*cosd(phi)-sind(psi)*sind(phi)];
  
    row_2 = [ sind(psi)*cosd(theta), sind(psi)*sind(theta)*sind(phi)+cosd(psi)*cosd(phi),...
              sind(psi)*sind(theta)*cosd(phi)-cosd(psi)*sind(phi)];
    
    row_3 = [ -sind(theta), cosd(theta)*sind(phi), cosd(theta)*cosd(phi)]
    
    rot_Matrix = [ row_1; row_2; row_3;]
    
    
    inrtl_Vec = rot_Matrix * body_Vec;
    
    
end 


%%%%%%%%%%%%%%%%% 
% PID FUNCTIONS%
%%%%%%%%%%%%%%%%%
function [LastErr, last_t, lastinput, output, errSum, saved_output] = pidcompute(kp, ki, kd, last_t, samp_t, t, SetPoint, LastErr, input, lastinput, errSum, saved_output)

% current time is t 

if ( (t - last_t) >= samp_t )
    %compute error terms
    error = SetPoint - input;
    dErr = (error - LastErr);
    errSum = errSum + error;
    %to prevent derivative kick, use derr = dsetpoint - dinput, if setpoint
    %constant this is equal to -dinput. this way if setpoint changes you
    %don't have a super large derivative term
    dinpt = input - lastinput;

    %compute output term
    output = kp * error + ki * errSum - kd * dinpt;
    saved_output = output;
    
    %update variables
    last_t = t;
    LastErr = error;
    lastinput = input;
else
    output = saved_output;
    last_t = last_t;
    errSum = errSum;
end


end

%%%%%%%%%%%%%%%%%
%set sample time function%
%%%%%%%%%%%%%%%%%
function [ki, kd, samp_t] = set_samp_t(new_samp_t, samp_t, ki, kd)
      
    %adjust ki and kd for new sample time
    ratio = new_samp_t / samp_t;
    
    kd = (kd)/ratio;
    ki = (ki)*ratio;
    
    
    %set new sample time
    samp_t = new_samp_t;
    
end
